import com.aspose.words.*;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Base64;


public class Office2Pdf {
    public static void main(String[] args) throws Exception {
        //TIP Press <shortcut actionId="ShowIntentionActions"/> with your caret at the highlighted text
        // to see how IntelliJ IDEA suggests fixing it.
        String b64 = "";
        String html = convert(b64, "html");
        System.out.println("b64 "+ html);
    }
    public static String convert(String b64, String format) throws Exception {
        byte[] decodedBytes = Base64.getDecoder().decode(b64);
        InputStream inputStream = new ByteArrayInputStream(decodedBytes);
        Document doc = new Document(inputStream);
        String fileName = "doc." + format;
        doc.save(fileName);
        String base64 = readFileToBase64(fileName);
        deleteFile(fileName);
        return base64;
    }

    private static String readFileToBase64(String filePath) throws IOException {
        Path path = Paths.get(filePath);
        byte[] fileContent = Files.readAllBytes(path);

        // Convert byte array to base64 string
        return Base64.getEncoder().encodeToString(fileContent);
    }

    private static void deleteFile(String filePath) {
        Path path = Paths.get(filePath);

        try {
            // Delete the file
            Files.deleteIfExists(path);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}